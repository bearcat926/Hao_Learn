/**
 * 丑数
 * 我们把只包含质因子2、3和5的数称作丑数（Ugly Number）。
 * 例如6、8都是丑数，但14不是，因为它包含质因子7。
 * 求第n个丑数的值。
 * 
 * 样例：
 * 输入：5
 * 输出：5
 * 注意：习惯上我们把1当做第一个丑数。
 */

#include<iostream>
#include<vector>
using namespace std;
class Solution {
public:
	/**
	 * 考虑为一个三路归并的问题，第一路是包含质因子2的所有数的集合，第二路是包含3的质因子的所有数的集合，
	 * 同理，第三路是包含5的质因子的所有数的集合，但是可以看出，这三路是有交集的，所以需要去重，
	 * 还有就是需要指出的是此为只包含2,3,5质因子的集合。
	 */
    int getUglyNumber(int n) {
		if(n <= 1) return n;

        vector<int> f(1,1);
        int i = 0, j = 0, k = 0;
        long long t = 0;
		/**
		 * 数组f 是只包含2,3,5质因子的集合。
		 * f[i] * 2的值为包含质因子2的所有数的集合，
		 * f[j] * 3 -> 3,
		 * f[k] * 5 -> 5。
		 * i,j,k 的值一开始从0开始 -> f[i],f[j],f[k] 的值则从1开始
		 * 每次挑选 f[i] * 2, f[j] * 3, f[k] * 5 中最小的值作为下一个要放进集合的值 t
		 * 之后判断哪一个值等于t，则将其对应的系数（i,j,k 中的一个或多个）+1
		 * 重复判断直到n为0
		 */
        while(--n)
        {
            t = min(f[i] * 2, min(f[j] * 3, f[k] * 5));
            if(t == f[i] * 2) i++;
            if(t == f[j] * 3) j++;
            if(t == f[k] * 5) k++;
            f.push_back(t);
        }
        return f.back();
    }
};