"""
最长上升子序列 II
给定一个长度为 N 的数列，求数值严格单调递增的子序列的长度最长是多少。

输入格式
第一行包含整数 N。

第二行包含 N 个整数，表示完整序列。

输出格式
输出一个整数，表示最大长度。

数据范围
1 ≤ N ≤ 100000，
−10^9 ≤ 数列中的数 ≤ 10^9
输入样例：
7
3 1 2 1 8 5 6
输出样例：
4
=============================================
使用二分+单调队列优化
"""
N = 100000 + 10
A, Q = [], [0] * N  # A为原数组，Q存储【以Q[i]结尾的子串长度最长为 i】的数组
# 因此新进来的元素要不就在末尾增加，要不就替代第一个大于等于它元素的位置。

if __name__ == '__main__':
    n = int(input())
    A = list(map(int, input().split()))
    length = 0
    Q[0] = - 10 ** 9
    for i in range(n):
        l, r = 0, length
        while l < r:  # 使用二分寻找在单调队列中寻找第一个小于A[i]的数中最大的数（数字不重复，因此下一位应大于等于该数）
            mid = (l + r + 1) >> 1
            if Q[mid] < A[i]:
                l = mid
            else:
                r = mid - 1
        length = max(length, r + 1)  # 覆盖下一位 或 新增队列元素
        Q[r + 1] = A[i]
    print(length)
