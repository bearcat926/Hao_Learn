"""
滑动窗口
给定一个大小为 n≤10^6 的数组。

有一个大小为 k 的滑动窗口，它从数组的最左边移动到最右边。

你只能在窗口中看到 k 个数字。

每次滑动窗口向右移动一个位置。

以下是一个例子：

该数组为 [1 3 -1 -3 5 3 6 7]，k 为 3。

       窗口位置	      最小值	最大值
[1 3 -1] -3 5 3 6 7	   -1	   3
1 [3 -1 -3] 5 3 6 7	   -3	   3
1 3 [-1 -3 5] 3 6 7	   -3	   5
1 3 -1 [-3 5 3] 6 7	   -3	   5
1 3 -1 -3 [5 3 6] 7	    3	   6
1 3 -1 -3 5 [3 6 7]	    3	   7
你的任务是确定滑动窗口位于每个位置时，窗口中的最大值和最小值。

输入格式
输入包含两行。

第一行包含两个整数 n 和 k，分别代表数组长度和滑动窗口的长度。

第二行有 n 个整数，代表数组的具体数值。

同行数据之间用空格隔开。

输出格式
输出包含两个。

第一行输出，从左至右，每个位置滑动窗口中的最小值。

第二行输出，从左至右，每个位置滑动窗口中的最大值。

输入样例：
8 3
1 3 -1 -3 5 3 6 7
输出样例：
-1 -3 -3 -3 3 3
3 3 5 5 6 7
"""
N = 10 ** 6 + 10
head, tail = -1, -1
Q = [0] * N  # L数组存储原数据，Q数组存储数组下标

if __name__ == '__main__':
    n, k = map(int, input().split())
    L = list(map(int, input().split()))
    # min
    for i in range(n):
        # 判断队列中是否有元素且队头是否已经滑出窗口
        if head != tail and i - k + 1 > Q[tail + 1]:
            tail += 1
        # 删除队尾中大于等于当前值的数 - 比你年轻还比你优秀（或者一样），则永无出头之日
        while head != tail and L[Q[head]] >= L[i]:
            # pop
            head -= 1
        # push
        head += 1
        Q[head] = i
        if i >= k - 1:
            print(L[Q[tail + 1]], end=' ')
    print()
    # 重置队列
    head, tail = -1, -1
    # max
    for i in range(n):
        # 判断队列中是否有元素且队头是否已经滑出窗口
        if head != tail and i - k + 1 > Q[tail + 1]:
            tail += 1
        # 删除队尾中小于等于当前值的数 - 比你年轻还比你优秀（或者一样），则永无出头之日
        while head != tail and L[Q[head]] <= L[i]:
            # pop
            head -= 1
        # push
        head += 1
        Q[head] = i
        # 当i = k - 1时开始输出最大值 => k=3,i => [0,n)，则i = 2 = k - 1时才形成窗口
        if i >= k - 1:
            print(L[Q[tail + 1]], end=' ')