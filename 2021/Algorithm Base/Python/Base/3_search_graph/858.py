"""
Prim算法求最小生成树
给定一个 n 个点 m 条边的无向图，图中可能存在重边和自环，边权可能为负数。

求最小生成树的树边权重之和，如果最小生成树不存在则输出 impossible。

给定一张边带权的无向图 G=(V,E)，其中 V 表示图中点的集合，E 表示图中边的集合，n=|V|，m=|E|。

由 V 中的全部 n 个顶点和 E 中 n−1 条边构成的无向连通子图被称为 G 的一棵生成树，其中边的权值之和最小的生成树被称为无向图 G 的最小生成树。

输入格式
第一行包含两个整数 n 和 m。

接下来 m 行，每行包含三个整数 u,v,w，表示点 u 和点 v 之间存在一条权值为 w 的边。

输出格式
共一行，若存在最小生成树，则输出一个整数，表示最小生成树的树边权重之和，如果最小生成树不存在则输出 impossible。

数据范围
1≤n≤500,
1≤m≤10^5,
图中涉及边的边权的绝对值均不超过 10000。

输入样例：
4 5
1 2 1
1 3 2
1 4 3
2 3 2
3 4 4
输出样例：
6

========================================
最小生成树 - 无向图 - 正负边都无所谓

    一个有 n个结点的连通图的生成树 是 原图的极小连通子图，
    且包含原图中的所有 n 个结点，并且有保持图连通的最少的边。

    解决方法

        Prim(普利姆)算法

            朴素的Prim算法 O(n^2)   ->   稠密图

            堆优化的Prim算法 O(m * log_n)   ->   一般不常用

        Kruskal(克鲁斯卡尔)算法 O(m * log_m)   ->   稀疏图
========================================
朴素Prim算法

    1. 初始化距离为MAX
    2. 找到集合S外距离最近的点t
    3. 用t更新其他点到集合的距离，并把t加入到集合S
    4. 循环n次

"""
N, M, MAX = 500 + 10, 10 ** 5 + 10, 2 ** 32
G = [[MAX] * N for i in range(N)]
S = [False] * N  # 当前连通块中所有的点
D = [MAX] * N  # 存储建图过程中，当前点到集合的距离
n, m = 0, 0


def insert(a, b, w):
    if a != b:  # 处理自环
        G[a][b] = min(w, G[a][b])  # 处理重边


def prim():
    global n
    D[1] = 0
    res = 0
    for i in range(n):
        # 1. 先找个最短的
        t = 0
        for j in range(1, n + 1):  # 选中不在S中的，且距离连通块最近的节点
            if not S[j] and (t == 0 or D[j] < D[t]):  # 第一次不比较
                t = j

        if i != 0 and D[t] == MAX:  # 如果上面的 for循环没有找到距离连通块最近的点
            print('impossible')
            return
        else:  # 第一次不需要选边，而是选了一个点，其他时候则计算当前边的权值之和
            res += D[t]

        # 先算res，再根据t的边更新其他值

        # 2. 标记为连通块中的点
        S[t] = True

        # 3. 用t更新路径
        for j in range(1, n + 1):
            D[j] = min(G[t][j], D[j])  # 找最小边，指当前边到集合的最短距离

    print('impossible' if res == 0 else res)


if __name__ == '__main__':
    n, m = map(int, input().split())
    for i in range(m):
        a, b, w = map(int, input().split())
        insert(a, b, w)
        insert(b, a, w)
    prim()
